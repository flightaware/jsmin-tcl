if {[lsearch [namespace children] ::tcltest] == -1} then {
  package require tcltest
  namespace import ::tcltest::*
}

lappend auto_path ".."
package require jsmin

test jsmin-1.1 {
	Should remove newlines and spaces
} -body {
	set fp [open "js/jsmin-1.1.js"]
	jsmin::minify $fp stdout
	close $fp
} -output {var a=4;var b=5;var c=true&&(b>a);}

test jsmin-1.2 {
	Should remove comments
} -body {
	set fp [open "js/jsmin-1.2.js"]
	jsmin::minify $fp stdout
	close $fp
} -output {var a=4;var b=5;function foo(){return 1;}}

test jsmin-1.3 {
	Should remove comments between curly braces
} -body {
	set fp [open "js/jsmin-1.3.js"]
	jsmin::minify $fp stdout
	close $fp
} -output {function(){if(true){if(true){var a=0;}}}
var foo=[{"a":"b"},{"c":"d"}];}

test jsmin-1.4 {
	Should remove whitespace around math operators
} -body {
	set fp [open "js/jsmin-1.4.js"]
	jsmin::minify $fp stdout
	close $fp
} -output "var a=2/3;var b=a/12;var c=b/a/b/2*1+2/4-b%3;"

test jsmin-1.5 {
	Should ignore whitespace inside quotes
} -body {
	set fp [open "js/jsmin-1.5.js"]
	jsmin::minify $fp stdout
	close $fp
} -output {var a="foo   bar";var b=' foo baz  ';var c=" nested 'quotes foo'";var d=' nested "quotes foo"';var e=" nested \"quotes foo\"";var foo=' nested \'quotes foo\'';var baz='\\';var bar="\\";var newline="\n";var baz='\\\'';var bar="\\\"";var f="asd";}

test jsmin-1.6 {
	Should ignore regular expressions
} -body {
	set fp [open "js/jsmin-1.6.js"]
	jsmin::minify $fp stdout
	close $fp
} -output {var foo=/^.*some  regex+$/;var a="foo bar";console.log(a.replace(/foo /g,"bar"));var bar=/d(b+) d/g.exec("cdbb dbsbz");console.log("text "+/d(b+) d/g.lastIndex);if(true&&/d(b+) d/g.exec("cdbb dbsbz"))break;var baz={"a":/r+ e+  gex/};var arg=true&&/^\[a (b)\]$/.test();}

test jsmin-1.7 {
	Should remove whitespace between letters and an open quote.
} -body {
	set fp [open "js/jsmin-1.7.js"]
	jsmin::minify $fp stdout
	close $fp
} -output {function foo(){return"bar";}}

test jsmin-1.8 {
	Should keep newlines if no semicolon present
} -body {
	set fp [open "js/jsmin-1.8.js"]
	jsmin::minify $fp stdout
	close $fp
} -output {var a=4
var b=5}

test jsmin-1.9 {
	Should remove newlines between consecutive method calls
} -body {
	set fp [open "js/jsmin-1.9.js"]
	jsmin::minify $fp stdout
	close $fp
} -output {this.foo().baz().bar();}

test jsmin-1.10 {
	Should remove whitespace following a closed quoted string
} -body {
	set fp [open "js/jsmin-1.10.js"]
	jsmin::minify $fp stdout
	close $fp
} -output {var foo="Float32Array"in window;var bar="this"+"that";}

test jsmin-1.11 {
	Should remove newlines in ternary operator split across several lines
} -body {
	set fp [open "js/jsmin-1.11.js"]
	jsmin::minify $fp stdout
	close $fp
} -output {var foo=function(s){return bar(s)?0:s;};var a={"a":$this};}

test jsmin-1.12 {
	Should keep newline in multiline var declaration
} -body {
	set fp [open "js/jsmin-1.12.js"]
	jsmin::minify $fp stdout
	close $fp
} -output {var
foo=4,bar="a";var
_foo=4,$bar="a";var foo=foo$
var bar=bar_
foo();}

test jsmin-1.13 {
	Should keep whitespace around inline block comment if no semicolon
} -body {
	set fp [open "js/jsmin-1.13.js"]
	jsmin::minify $fp stdout
	close $fp
} -output {var asd=1 foo.bar();}

test jsmin-1.14 {
	More problems
} -body {
	set fp [open "js/jsmin-1.14.js"]
	jsmin::minify $fp stdout
	close $fp
} -output {if(foo()&&bar()){return false;}}

test jsmin-1.15 {
	Should keep necessary whitespace around plus and minus operators
} -body {
	set fp [open "js/jsmin-1.15.js"]
	jsmin::minify $fp stdout
	close $fp
} -output {a++
b();c--
d();var e=2+ ++a;var f=2- --a;var g=2+ --a;var h=2- ++a;}

test jsmin-1.16 {
	Should correctly remove // style line comments
} -body {
	set fp [open "js/jsmin-1.16.js"]
	jsmin::minify $fp stdout
	close $fp
} -output {if(true){var a="b";}
var c="";var d=c;}

test jsmin-1.17 {
	Correctly handle tabs
} -body {
	set fp [open "js/jsmin-1.17.js"]
	jsmin::minify $fp stdout
	close $fp
} -output {var a=4;}

test jsmin-1.18 {
	Should remove whitespace in some more uncommon examples
} -body {
	set fp [open "js/jsmin-1.18.js"]
	jsmin::minify $fp stdout
	close $fp
} -output {var foo=bar?(1+1):1;var a=4;var b=4^2;}

cleanupTests
